from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import Dispatcher
from Telegram_Turtle_Bot.sorted import bot
from Telegram_Turtle_Bot.keyboards.keyboard import full_keyboard, inline_button_one, inline_button_two
from Telegram_Turtle_Bot.commands_bot import Schedule


class FSMclient(StatesGroup):
    log_in = State()
    enter_group = State()


async def start_reg(message: types.Message):
    # if message.chat.type == 'private':
    await FSMclient.log_in.set()
    await bot.send_message(message.chat.id, 'üëÄ –ü—Ä–∏–≤–µ—Ç, –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –¥–∞–≤–∞–π —è –ø–æ–º–æ–≥—É –≤ –Ω–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.',
                               reply_markup=inline_button_two())


async def stop_reg(call_back: types.CallbackQuery, state: FSMContext):
    if await state.get_state() is None:
        return
    await state.finish()
    await bot.edit_message_text('–ö–∞–∫ —Å–∫–∞–∂–µ—à—å üê¢\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ', call_back.message.chat.id, call_back.message.message_id)
    # await bot.send_message(call_back.from_user.id, '–ö–∞–∫ —Å–∫–∞–∂–µ—à—å)\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:')


async def default_func(call_back: types.CallbackQuery):
    await FSMclient.next()
    await bot.edit_message_text('‚úè –ù–∞–ø–∏—à–∏ –≤ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø–µ.', call_back.message.chat.id, call_back.message.message_id)
    # await bot.send_message(call_back.from_user.id, '‚úè –ù–∞–ø–∏—à–∏ –≤ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø–µ.')


async def enter_group(message: types.Message, state: FSMContext):
    schedule = Schedule()
    if schedule.check_group(group=message.text.upper()):
        await bot.send_message(message.from_user.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–µ—Ä–∂–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!',
                               reply_markup=full_keyboard(message.text.upper()))
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, '[üö´] –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é –≥—Ä—É–ø–ø—É, –ø—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                                                     '–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –≥—Ä—É–ø–ø—É.', reply_markup=inline_button_one())


def register_handlers_one_client(dp: Dispatcher):
    dp.register_message_handler(start_reg, lambda message: message.chat.type == 'private',
                                Text(equals=['–ù–∞—á–∞—Ç—å', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'], ignore_case=True), state=None)
    dp.register_callback_query_handler(stop_reg, text='No', state='*')
    dp.register_message_handler(stop_reg, Text(equals=['–Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', '–ó–∞–≤–µ—Ä—à–∏—Ç—å'],
                                               ignore_case=True), state='*')
    dp.register_callback_query_handler(default_func, text='Yeah', state=FSMclient.log_in)
    dp.register_message_handler(enter_group, content_types='text', state=FSMclient.enter_group)
